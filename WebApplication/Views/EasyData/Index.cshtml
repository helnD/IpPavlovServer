@{
    ViewData["Title"] = "Управление данными";
}
<div id="EasyDataContainer">
    <h1>Управление данными</h1>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://cdn.korzh.com/ed/1.4.3/easydata.min.css"/>
    <script src="https://cdn.korzh.com/ed/1.4.3/easydata.min.js" type="text/javascript"></script>

    <script>
        const changedIdPrefix = "_changed_"

        window.addEventListener('load', function () {
            new easydata.crud.EasyDataViewDispatcher().run()
        });

        const changeEntitiesTitle = () => {
            const title = document.getElementsByTagName('h1')[0]
            if (title && title.innerText === 'Entities') {
                title.id = changedIdPrefix + title.id
                title.innerText = 'Управление данными'
            }
        }

        const changeEntitiesListTitle = () => {
            const titleElement = document.querySelector(".ed-menu-description")

            if (titleElement.id.startsWith(changedIdPrefix)) {
                return
            }

            if (titleElement) {
                titleElement.innerText = 'Выберите таблицу для просмотра/редактирования контента'
                titleElement.id = changedIdPrefix + titleElement.id
            }
        }

        const removeIdentityEntities = () => {
            const identityEntities = [
                'Identity User Logins',
                'Identity User Claims',
                'Identity Role Claims',
                'Identity Roles',
                'Identity User Roles',
                'Identity User Tokens'
            ]

            const entitiesList = document.querySelector(".ed-entity-menu")
            console.log(entitiesList)
            if (!entitiesList) {
                return;
            }

            const entities = [... entitiesList.children];
            const entitiesToRemove = entities.filter(entity => {
                const value = entity.children[0].innerText;
                return identityEntities.includes(value)
            })

            for (const entityToRemove of entitiesToRemove) {
                entityToRemove.remove()
            }
        }

        const insertImageForm = () => {
            if (window.location.href.includes('Image')) {
                const imageInput = document.getElementById("image-input");
                if (imageInput) {
                    return;
                }

                const modal = document.getElementsByClassName("kdlg-modal-window")[0];
                if (!modal) {
                    return
                }

                const formContent = modal.getElementsByClassName("kfrm-fields")[0]

                const imageTypeSelect = document.createElement('select')
                imageTypeSelect.className = "form-select"
                imageTypeSelect.innerHTML = `
                    <option value="Products">Продукт</option>
                    <option value="Certificates">Сертификат</option>
                    <option value="Categories">Категория</option>
                    <option value="Partners">Партнер</option>
                `
                const imageTypeLabel = document.createElement('label')
                imageTypeLabel.innerText = 'Назначение : '

                formContent.appendChild(imageTypeLabel)
                formContent.appendChild(imageTypeSelect)

                const imageInputElement = document.createElement('div')
                imageInputElement.innerHTML = '<input required type="file" class="form-control" id="image-input"/>'

                const imageLabelElement = document.createElement('label')
                imageLabelElement.innerText = 'Файл : '

                formContent.appendChild(imageLabelElement)
                formContent.appendChild(imageInputElement)

                const confirmButton = modal.getElementsByClassName("kfrm-button is-info")[0]
                const closeButton = modal.getElementsByClassName("kfrm-button")[1]
                confirmButton.onclick = () => {
                    let photo = imageInputElement.children[0].files[0]
                    if (!photo) {
                        return
                    }

                    let formData = new FormData()
                    formData.append("image", photo)
                    fetch(`${window.location.origin}/api/v1/images?type=${imageTypeSelect.value}`, {method: "POST", body: formData})
                        .then(() => {
                           closeButton.click()
                           window.location.reload()
                        });
                }
            }
        }

        const mutationObserver = new MutationObserver(() => {
            changeEntitiesTitle()
            changeEntitiesListTitle()
            insertImageForm()
            removeIdentityEntities()
        });

        mutationObserver.observe(document,  {subtree: true, childList: true});
    </script>
}